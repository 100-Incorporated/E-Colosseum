openapi: 3.0.0
info:
  title: User API
  description: REST API for managing user data
  version: 1.0.0

servers:
  - url: http://localhost:8080

paths:
  /users:
    get:
      summary: Get all users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
              examples:
                users:
                  value:
                    - id: 1
                      username: alice
                      password: password
                      birthday: 1990-01-01
                    - id: 2
                      username: bob
                      password: password
                      birthday: 1995-01-01
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    error:
                      code: 500
                      message: Internal server error

    post:
      summary: Create a new user
      requestBody:
        description: User to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              user:
                value:
                  username: alice
                  password: password
                  birthday: 1990-01-01
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                user:
                  value:
                    id: 1
                    username: alice
                    password: password
                    birthday: 1990-01-01
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    error:
                      code: 400
                      message: Invalid request payload
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    error:
                      code: 500
                      message: Internal server error

  /users/{id}:
    get:
      summary: Get a user by ID
      parameters:
        - in: path
          name: id
          description: ID of the user to retrieve
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                user:
                  value:
                    id: 1
                    username: alice
                    password: password
                    birthday: 1990-01-01
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    error:
                      code: 404
                      message: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    error:
                      code: 500
                      message: Internal server error

    put:
      summary: Update a user by ID
      parameters:
        - in: path
          name: id
          description: ID of the user to update
          required: true
          schema:
            type: integer
      requestBody:
        description: User to update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              user:
                value:
                  username: Bob
                  password: newPass
                  birthday: 2000-06-06
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                user:
                  value:
                    id: 1
                    username: alice
                    password: password
                    birthday: 1990-01-01
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    error:
                      code: 404
                      message: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    error:
                      code: 500
                      message: Internal server error

    delete:
      summary: Delete a user by ID
      parameters:
        - in: path
          name: id
          description: ID of the user to delete
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
              examples:
                message: 
                  value:
                    message: User deleted successfully
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    error:
                      code: 404
                      message: User not foudn            
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    error:
                      code: 500
                      message: Internal server error
    patch:
      summary: Update a user by ID
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the user to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              userFullLogin:
                value:
                  username: bob
                  password: newPass 
              userOnlyName:
                value:
                  username: bob
              userOnlyPass:
                value:
                  password: newPass 
      responses:
        '200':
          description: Successfully updated the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
              examples:
                user:
                  value:
                    id: 1
                    username: alice
                    password: password
                    birthday: 1990-01-01
        '400':
          description: Invalid request payload
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    error:
                      code: 400
                      message: Invalid request payload
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    error:
                      code: 404
                      message: User not found
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                error:
                  value:
                    error:
                      code: 500
                      message: Internal server error
components:
  schemas:
    User:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        birthday:
          type: string
    UserResponse:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        birthday:
          type: string
      required:
        - id
        - username
        - password
        - birthday
    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: integer
            message:
              type: string
            details:
              type: object
          required:
            - code
            - message
      required:
        - error
    Message:
      type: object
      properties:
        message:
          type: string
      required:
        - message